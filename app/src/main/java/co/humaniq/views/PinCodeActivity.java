
package co.humaniq.views;

import android.Manifest;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.annotation.DrawableRes;
import android.support.annotation.IdRes;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import co.humaniq.*;
import co.humaniq.controllers.ResetPinCodeController;
import co.humaniq.models.*;
import co.humaniq.services.AccountService;

import java.io.File;
import java.io.IOException;


public class PinCodeActivity extends ToolbarActivity {
    final static int REQUEST_PHOTO_CAPTURE = 1001;
    final static int REQUEST_PHOTO_CAPTURE_PERMISSION = 4001;
    final static int REQUEST_WRITE_EXTERNAL_STORAGE_PERMISSION = 4002;

    final static int REQUEST_GET_META = 2001;
    final static int REQUEST_GET_SALT = 2002;
    final static int REQUEST_GENERATE_SALT = 2003;
    final static int REQUEST_FINISH_REGISTRATION = 2004;

    private PinButton[] pinButtons = new PinButton[11];
    private PinPlace[] pinPlaces = new PinPlace[4];
    private int pinCursor = 0;
    private Preferences preferences;
    private ProgressDialog progressDialog;
    private String capturedPhotoPath;
    private WalletInfo walletInfo = null;
    private String photoBase64 = "";
//    private String photoBase64 = "";
    private String pinCode;
    private WalletHMQ generatedWallet;
    private boolean triedGetMeta = false;

    final static int NO_ACTION = 0;
    final static int REGISTER_ACTION = 1;
    final static int LOGIN_ACTION = 2;

    private int action = NO_ACTION;

    private class PinButton implements View.OnClickListener {
        View includeView;
        ImageView icon;
        ImageView animal;
        int animalRes;
        String code;
        boolean selected = false;

        PinButton(String code, @IdRes int includeViewId, @DrawableRes int imageResource) {
            includeView = findViewById(includeViewId);
            icon = (ImageView) includeView.findViewById(R.id.iconImageView);
            animal = (ImageView) includeView.findViewById(R.id.animalImageView);
            animal.setImageResource(imageResource);
            animal.setOnClickListener(this);
            animalRes = imageResource;
            icon.setColorFilter(ContextCompat.getColor(PinCodeActivity.this, R.color.success));
            this.code = code;
        }

        @Override
        public void onClick(View v) {
            if (pinCursor >= 4 || selected)
                return;

            select();
            pinPlaces[pinCursor].select(this);
            pinCursor++;
        }

        void select() {
            icon.setVisibility(View.VISIBLE);
            animal.setAlpha(0.8f);
            selected = true;
        }

        void deSelect() {
            icon.setVisibility(View.INVISIBLE);
            animal.setAlpha(1.f);
            selected = false;
        }
    }

    private class PinPlace implements View.OnClickListener {
        View includeView;
        ImageView icon;
        ImageView animal;
        PinButton pinButton = null;
        int index = 0;

        PinPlace(int index, @IdRes int includeViewId) {
            includeView = findViewById(includeViewId);
            icon = (ImageView) includeView.findViewById(R.id.iconImageView);
            animal = (ImageView) includeView.findViewById(R.id.animalImageView);
            icon.setImageResource(R.drawable.ic_delete_pin_image);
            icon.setOnClickListener(this);
            this.index = index;
        }

        void select(PinButton button) {
            icon.setVisibility(View.VISIBLE);
            pinButton = button;
            animal.setImageResource(button.animalRes);
        }

        void deSelect() {
            icon.setVisibility(View.INVISIBLE);
            animal.setImageResource(0);

            if (pinButton == null)
                return;

            pinButton.deSelect();
            pinButton = null;
        }

        @Override
        public void onClick(View v) {
            for (int i = index; i < pinPlaces.length; ++i) {
                pinPlaces[i].deSelect();
            }

            if (index < pinCursor)
                pinCursor = index;
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pin_code);
        initToolbar();
        initView();

        attachOnClickView(R.id.nextStepButton);
        preferences = App.getPreferences(this);
    }

    private String pinCodeToString() {
        StringBuilder str = new StringBuilder();

        for (PinPlace place : pinPlaces) {
            if (place.pinButton == null)
                return "";

            str.append(place.pinButton.code);
        }

        return str.toString();
    }

    private void initView() {
        pinButtons[0] = new PinButton("gi1", R.id.giraffe_include, R.drawable.ic_giraffe);
        pinButtons[1] = new PinButton("el2", R.id.elephant_include, R.drawable.ic_elephant);
        pinButtons[2] = new PinButton("ko3", R.id.koala_include, R.drawable.ic_koala);
        pinButtons[3] = new PinButton("li4", R.id.lion_include, R.drawable.ic_lion);
        pinButtons[4] = new PinButton("ka5", R.id.kangaroo_include, R.drawable.ic_kangaroo);
        pinButtons[5] = new PinButton("ti6", R.id.tiget_layout, R.drawable.ic_tiger);
        pinButtons[6] = new PinButton("ra7", R.id.raccoon_include, R.drawable.ic_raccoon);
        pinButtons[7] = new PinButton("he8", R.id.hedgehog_include, R.drawable.ic_hedgehog);
        pinButtons[8] = new PinButton("le9", R.id.lemur_include, R.drawable.ic_lemur);
        pinButtons[9] = new PinButton("ch10", R.id.chameleon_include, R.drawable.ic_chameleon);
        pinButtons[10] = new PinButton("ca11", R.id.cat_include, R.drawable.ic_cat);

        pinPlaces[0] = new PinPlace(0, R.id.pin_place_1);
        pinPlaces[1] = new PinPlace(1, R.id.pin_place_2);
        pinPlaces[2] = new PinPlace(2, R.id.pin_place_3);
        pinPlaces[3] = new PinPlace(3, R.id.pin_place_4);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menu_item_reset_pin_code:
                new ResetPinCodeController(this).handle();
                return true;

            default:
                return super.onOptionsItemSelected(item);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
//        inflater.inflate(R.menu.pin_code_menu, menu);

        return true;
    }

    @OnPermissionResult(REQUEST_WRITE_EXTERNAL_STORAGE_PERMISSION)
    public void nextStepOrLogin() {
        Log.d("PINCODE", preferences.getLoginCount().toString());
        pinCode = pinCodeToString();

        if (pinCode.trim().equals("") || pinCursor != 4)
            return;

        // Каждый третий заход, запрашиваем лицо
        // В данном случае - если 0, то просим лицо, если 3, сбрасываем на 0
        if (preferences.getLoginCount() >= 3)
            preferences.setLoginCount(0);

        final String accountKeyFile = preferences.getAccountKeyFile();
        final String address = preferences.getAccountAddress();

        if (accountKeyFile.equals("") || address.equals("")) {
            if (!triedGetMeta) {
                triedGetMeta = true;
                requestGetAccountMeta();
                return;
            }

            Bundle bundle = new Bundle();
            bundle.putString("pin_code", pinCode);
            Router.setBundle(bundle);

            requestRegisterAccount();
        } else {
            if (preferences.getLoginCount() == 0 || preferences.getAccountSalt().equals("")) {
                preferences.setAccountSalt("");  // Сбрасываем соль, необходимо снова получить
                requestLoginToAccount();
            } else {
                showProgressbar();
                new WalletAsyncTask().execute(new WalletAsyncTaskParam(WalletAsyncTask.SIGN_WALLET));
            }
        }
    }

    private void requestLoginToAccount() {
        action = LOGIN_ACTION;
        grantPermission(Manifest.permission.CAMERA, REQUEST_PHOTO_CAPTURE_PERMISSION);
    }

    private void requestRegisterAccount() {
        action = REGISTER_ACTION;
        grantPermission(Manifest.permission.CAMERA, REQUEST_PHOTO_CAPTURE_PERMISSION);
    }

    private void requestGetAccountMeta() {
        AccountService service = new AccountService(this);
        service.getMeta(Client.getDeviceId(this), REQUEST_GET_META);
    }

    private void showProgressbar() {
        progressDialog = new ProgressDialog(this);
        progressDialog.setCancelable(false);
        progressDialog.show();
    }

    private void hideProgressbar() {
        if (progressDialog == null)
            return;

        progressDialog.hide();
        progressDialog = null;  // Revoke
    }

    private void goTakePhotoActivity(final String pinCode) {
        Bundle bundle = new Bundle();
        bundle.putString("pin_code", pinCode);
        Router.setBundle(bundle);
    }

    private void alert(final String title, final String message) {
//        if (progressDialog == null)
//            return;

        hideProgressbar();

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        AlertDialog alertDialog = builder.setTitle(title).setMessage(message).create();
        alertDialog.show();
    }

    // Пин код введен не верно
    public void onErrorPinCode() {
        alert("Error", "Invalid pin code");
    }

    // Если пользователя не удалось получить, вероятно AccessToken уже не действителен
    // Поэтому нужно получить новый на экране LoginRegisterActivity
    public void onErrorFetchUser() {
        alert("Error", "Something went wrong");
        ///////alert("Error", "Wrong pin code or face/");
//        final String pinCode = pinCodeToString();
//
//        if (pinCode.trim().equals("") || pinCursor != 4)
//            return;
//
//        goTakePhotoActivity(pinCode);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.nextStepButton:
//                nextStepOrLogin();
                grantPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE,
                        REQUEST_WRITE_EXTERNAL_STORAGE_PERMISSION);
                break;

            default:
                break;
        }
    }

// Take photo --------------------------------------------------------------------------------------

    @OnPermissionResult(REQUEST_PHOTO_CAPTURE_PERMISSION)
    public void openTakePhotoActivity() {
        File photoFile;

        try {
            photoFile = ImageTool.createImageFile(this);
            capturedPhotoPath = photoFile.getAbsolutePath();
        } catch (IOException ex) {
            onApiValidationError(null, 0);
            return;
        }

        Log.e("TakePhotoActivity", capturedPhotoPath);
        Uri photoURI = FileProvider.getUriForFile(this, "co.humaniq.fileprovider", photoFile);

        Bundle bundle = new Bundle();
        bundle.putString(MediaStore.EXTRA_OUTPUT, capturedPhotoPath);

        Router.setBundle(bundle);
        Router.goActivity(this, Router.TAKE_PHOTO, REQUEST_PHOTO_CAPTURE);
//        onActivityResult(REQUEST_PHOTO_CAPTURE, RESULT_OK, null);
    }

    protected void retrieveBase64() {
        Bitmap requestImage = ImageTool.decodeSampledBitmap(capturedPhotoPath, 512, 512);
        photoBase64 = ImageTool.encodeToBase64(requestImage);
        requestImage.recycle();
    }

    private void finalStep() throws WalletHMQ.WalletNotGeneratedException {
        switch (action) {
            case REGISTER_ACTION:
                generateNewAccount();
                break;

            case LOGIN_ACTION:
                doLogin();
                break;

            default:
                return;
        }
    }

    static class WalletAsyncTaskParam {
        int action;
        WalletInfo walletInfo;

        WalletAsyncTaskParam(int action, WalletInfo walletInfo) {
            this.action = action;
            this.walletInfo = walletInfo;
        }

        WalletAsyncTaskParam(int action) {
            this.action = action;
        }
    }

    private class WalletAsyncTask extends AsyncTask<WalletAsyncTaskParam, Void, WalletHMQ> {
        final static int GENERATE_WALLET = 0;
        final static int SAVE_WALLET = 1;
        final static int SIGN_WALLET = 2;

        private WalletAsyncTaskParam param;

        // Tasks
//        private WalletHMQ generateWalletTask() {
//            try {
//                return WalletHMQ.generateWallet(PinCodeActivity.this, pinCode);
//            } catch (WalletHMQ.WalletNotGeneratedException e) {
//                e.printStackTrace();
//                return null;
//            }
//        }

        private WalletHMQ saveWalletTask() {
            final String finalPassword = pinCode + param.walletInfo.getSalt();

            try {
                return WalletHMQ.generateWallet(PinCodeActivity.this, finalPassword);
            } catch (WalletHMQ.WalletNotGeneratedException e) {
                e.printStackTrace();
                return null;
            }
        }

        private WalletHMQ getSignedWalletTask() {
            final String accountFile = preferences.getAccountKeyFile();
            try {
                if (param.walletInfo == null) {
                    return WalletHMQ.getSignedWallet(preferences.getAccountKeyFile(), pinCode,
                            preferences.getAccountSalt());
                } else {
                    return WalletHMQ.getSignedWallet(accountFile, pinCode, param.walletInfo);
                }
            } catch (WalletHMQ.CantSignedException e) {
                e.printStackTrace();
                return null;
            }
        }

        @Override
        protected WalletHMQ doInBackground(WalletAsyncTaskParam... params) {
            param = params[0];

            switch (param.action) {
//                case GENERATE_WALLET:
//                    return generateWalletTask();

                case SAVE_WALLET:
                    return saveWalletTask();

                case SIGN_WALLET:
                    return getSignedWalletTask();

                default:
                    throw new UnsupportedOperationException();
            }
        }

        // Post Execute
//        private void generateWalletPostExecute(WalletHMQ result) {
//            generatedWallet = result;
//            AccountService service = new AccountService(PinCodeActivity.this);
//            service.generateSalt(photoBase64, REQUEST_GENERATE_SALT);
//        }
//
        private void saveWalletPostExecute(WalletHMQ wallet) {
            wallet.setWalletInfo(walletInfo);
            generatedWallet = wallet;
            AccountService service = new AccountService(PinCodeActivity.this);
            service.finishRegistration(wallet.getWalletInfo().getId(),
                    wallet.getAddress(),
                    wallet.getWalletPath(),
                    REQUEST_FINISH_REGISTRATION);
//
//            try {
//                wallet.sign(pinCode, param.walletInfo);
//                wallet.save(PinCodeActivity.this);
//                wallet.setAsWorkWallet();
//
//                preferences.setAccountSalt(param.walletInfo.getSalt());
//                preferences.setLoginCount(preferences.getLoginCount() + 1);
//
//                setResult(RESULT_OK);
//                finish();
//            } catch (WalletHMQ.CantSignedException e) {
//                e.printStackTrace();
//                alert("Error", "wallet can't signed");
//            }
        }

        private void getSignedWalletPostExecute(WalletHMQ signedWallet) {
            signedWallet.setAsWorkWallet();

            if (param.walletInfo != null)
                preferences.setAccountSalt(param.walletInfo.getSalt());

            preferences.setLoginCount(preferences.getLoginCount() + 1);

            setResult(RESULT_OK);
            finish();
        }

        @Override
        protected void onPostExecute(WalletHMQ result) {
            if (result == null) {
                alert("Error", "Wallet not generated");
                return;
            }

            switch (param.action) {
//                case GENERATE_WALLET:
//                    generateWalletPostExecute(result);
//                    break;
//
                case SAVE_WALLET:
                    saveWalletPostExecute(result);
                    break;

                case SIGN_WALLET:
                    getSignedWalletPostExecute(result);
                    break;

                default:
                    throw new UnsupportedOperationException();
            }
        }
    }

    private void doLogin() {
        showProgressbar();
        AccountService service = new AccountService(this);
        service.getSalt(photoBase64, preferences.getAccountAddress(), REQUEST_GET_SALT);
    }

    private void generateNewAccount() throws WalletHMQ.WalletNotGeneratedException {
        showProgressbar();
        AccountService service = new AccountService(this);
        service.generateSalt(Client.getDeviceId(this), photoBase64, REQUEST_GENERATE_SALT);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (resultCode != RESULT_OK || requestCode != REQUEST_PHOTO_CAPTURE) {
            super.onActivityResult(requestCode, resultCode, data);
            return;
        }

        try {
            retrieveBase64();
            finalStep();
        } catch (WalletHMQ.WalletNotGeneratedException e) {
            e.printStackTrace();
        }
    }

// Api events --------------------------------------------------------------------------------------

    @Override
    public void onApiSuccess(ResultData result, int requestCode) {
        if (requestCode != REQUEST_GET_META)
            walletInfo = (WalletInfo) result.data();

        switch (requestCode) {
            case REQUEST_GET_META:
                WalletMeta walletMeta = (WalletMeta) result.data();
                walletMeta.save(this);
                nextStepOrLogin();
                break;

            case REQUEST_GET_SALT:
                new WalletAsyncTask().execute(new WalletAsyncTaskParam(WalletAsyncTask.SIGN_WALLET, walletInfo));
                break;

            case REQUEST_GENERATE_SALT:
                new WalletAsyncTask().execute(new WalletAsyncTaskParam(WalletAsyncTask.SAVE_WALLET, walletInfo));
                break;

            case REQUEST_FINISH_REGISTRATION:
                try {
                    generatedWallet.sign(pinCode, walletInfo);
                    generatedWallet.save(PinCodeActivity.this);
                    generatedWallet.setAsWorkWallet();

                    preferences.setAccountSalt(walletInfo.getSalt());
                    preferences.setLoginCount(preferences.getLoginCount() + 1);

                    setResult(RESULT_OK);
                    finish();
                } catch (WalletHMQ.CantSignedException e) {
                    e.printStackTrace();
                    alert("Error", "wallet can't signed");
                }

                break;

            default:
                break;
        }
    }

    @Override
    public void onApiError(Errors errors, int type, int requestCode) {
        super.onApiError(errors, type, requestCode);

        if (requestCode == REQUEST_GET_META) {
            if (type != API_CONNECTION_ERROR)
                nextStepOrLogin();
        } else {
            onErrorFetchUser();
        }
    }
}
