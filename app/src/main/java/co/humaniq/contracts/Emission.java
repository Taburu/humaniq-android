package co.humaniq.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class Emission extends Contract {
    private static final String BINARY = "60606040526000600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506103e8600555341561003c57fe5b604051602080610faa833981016040528080519060200190919050505b80600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160036000600360ff16815260200190815260200160002081905550600160036000600260ff16815260200190815260200160002081905550600160036000600560ff168152602001908152602001600020819055505b505b610ea7806101036000396000f30060606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630e318cb5146100835780635bc2a576146100955780637ae2b5c7146100c95780638a9fb135146101065780639d52be1f14610158578063cc4791361461016a578063e6aa216c14610194575bfe5b341561008b57fe5b6100936101ba565b005b341561009d57fe5b6100b360048080359060200190919050506105f9565b6040518082815260200191505060405180910390f35b34156100d157fe5b6100f06004808035906020019091908035906020019091905050610625565b6040518082815260200191505060405180910390f35b341561010e57fe5b610116610641565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561016057fe5b610168610667565b005b341561017257fe5b61017a610aa6565b604051808215151515815260200191505060405180910390f35b341561019c57fe5b6101a4610dce565b6040518082815260200191505060405180910390f35b6000600554600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff1611156101ec5760006000fd5b600360048111156101f957fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600481111561025157fe5b141580156102c257506000600481111561026757fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660048111156102bf57fe5b14155b80156103315750600460048111156102d657fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600481111561032e57fe5b14155b156105f4576103c86103c160046103bc600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1660036000600260ff16815260200190815260200160002054610dd8565b610dd8565b6064610e0d565b9050600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663475a9fa93361041d84610415610dce565b600f02610625565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156104a757fe5b6102c65a03f115156104b557fe5b5050506040518051905050600260048111156104cd57fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600481111561052557fe5b1415610591576004600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600481111561058757fe5b02179055506105f3565b6003600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360048111156105ed57fe5b02179055505b5b5b5b50565b600061061d61035c610618846106136102d0600554610e0d565b610dd8565b610e50565b90505b919050565b6000818311156106375781905061063b565b8290505b92915050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff1611156106995760006000fd5b600260048111156106a657fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660048111156106fe57fe5b1415801561076f57506000600481111561071457fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16600481111561076c57fe5b14155b80156107de57506004600481111561078357fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660048111156107db57fe5b14155b15610aa15761087561086e6005610869600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1660036000600560ff16815260200190815260200160002054610dd8565b610dd8565b6064610e0d565b9050600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663475a9fa9336108ca846108c2610dce565b600f02610625565b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561095457fe5b6102c65a03f1151561096257fe5b50505060405180519050506003600481111561097a57fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660048111156109d257fe5b1415610a3e576004600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836004811115610a3457fe5b0217905550610aa0565b6002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836004811115610a9a57fe5b02179055505b5b5b5b50565b60006000600554600460009054906101000a900467ffffffffffffffff1667ffffffffffffffff161115610ada5760006000fd5b610b40600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900467ffffffffffffffff1667ffffffffffffffff166105f9565b905060006004811115610b4f57fe5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166004811115610ba757fe5b148015610c925750600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663475a9fa933836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610c7957fe5b6102c65a03f11515610c8757fe5b505050604051805190505b15610dc4576004600081819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050600460009054906101000a900467ffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836004811115610db657fe5b021790555060019150610dc9565b600091505b5b5090565b6000600190505b90565b600060008284029050610e026000851480610dfd5750838583811515610dfa57fe5b04145b610e6a565b8091505b5092915050565b60006000610e1d60008411610e6a565b8284811515610e2857fe5b049050610e458385811515610e3957fe5b06828502018514610e6a565b8091505b5092915050565b6000610e5e83831115610e6a565b81830390505b92915050565b801515610e775760006000fd5b5b505600a165627a7a723058202b769c7ab397030188d257fe120ce90d73dd0aebb227412c727fba867dd041f10029\n";

    public Emission(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Emission(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<TransactionReceipt> getBonusForReceivedTx() {
        Function function = new Function("getBonusForReceivedTx", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> emissionAmount(Uint256 registrationNumber) {
        Function function = new Function("emissionAmount", Arrays.<Type>asList(registrationNumber), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> min(Uint256 a, Uint256 b) {
        Function function = new Function("min", Arrays.<Type>asList(a, b), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> humaniqToken() {
        Function function = new Function("humaniqToken", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> getBonusForSentTx() {
        Function function = new Function("getBonusForSentTx", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> fixRegistration() {
        Function function = new Function("fixRegistration", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> getExchangeRate() {
        Function function = new Function("getExchangeRate", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<Emission> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Address contractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(contractAddress));
        return deployAsync(Emission.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Future<Emission> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, Address contractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(contractAddress));
        return deployAsync(Emission.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static Emission load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Emission(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Emission load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Emission(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
