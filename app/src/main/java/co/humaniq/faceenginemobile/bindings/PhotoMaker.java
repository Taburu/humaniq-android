/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package co.humaniq.faceenginemobile.bindings;

public final class PhotoMaker {
    private transient boolean swigCMemOwn;
    private transient long swigCPtr;

    private PhotoMaker(long cPtr, boolean cMemoryOwn) {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = cPtr;
    }

    public PhotoMaker() {
        this(WrapperJNI.new_PhotoMaker(), true);
    }

    public static long getCPtr(PhotoMaker obj) {
        return (obj == null) ? 0 : obj.swigCPtr;
    }

    protected void finalize() throws Throwable {
        delete();
        super.finalize();
    }

    private synchronized void delete() {
        if (swigCPtr != 0) {
            if (swigCMemOwn) {
                swigCMemOwn = false;
                WrapperJNI.delete_PhotoMaker(swigCPtr);
            }
            swigCPtr = 0;
        }
    }

    public boolean isLoaded() {
        return WrapperJNI.PhotoMaker_isLoaded(swigCPtr, this);
    }

    public boolean load(String path) {
        return WrapperJNI.PhotoMaker_load(swigCPtr, this, path);
    }

    public void reset() {
        WrapperJNI.PhotoMaker_reset(swigCPtr, this);
    }

    public boolean haveFaceDetection() {
        return WrapperJNI.PhotoMaker_haveFaceDetection(swigCPtr, this);
    }

    public boolean faceDetectionIsPredicted() {
        return WrapperJNI.PhotoMaker_faceDetectionIsPredicted(swigCPtr, this);
    }

    //public float getFaceDetectionPredictionConfidence() {
    //    return WrapperJNI.PhotoMaker_getFaceDetectionPredictionConfidence(swigCPtr, this);
    //}

    public Rect getFaceDetection() {
        return new Rect(WrapperJNI.PhotoMaker_getFaceDetection(swigCPtr, this), true);
    }

    public float[] getScores() {
        return WrapperJNI.PhotoMaker_getScores(swigCPtr, this);
    }

    public Rect getSmoothedFaceDetection() {
        return new Rect(WrapperJNI.PhotoMaker_getSmoothedFaceDetection(swigCPtr, this), true);
    }

    public void update() {
        WrapperJNI.PhotoMaker_update(swigCPtr, this);
    }

    public void submit(ImageView frame) {
        WrapperJNI.PhotoMaker_submit(swigCPtr, this, ImageView.getCPtr(frame), frame);
    }

    public ImageView getBestShot() {
        return new ImageView(WrapperJNI.PhotoMaker_getBestShot(swigCPtr, this), true);
    }

    public boolean haveBestShot() {
        return WrapperJNI.PhotoMaker_haveBestShot(swigCPtr, this);
    }

    public ImageView getBestFrame() {
        return new ImageView(WrapperJNI.PhotoMaker_getBestFrame(swigCPtr, this), true);
    }

    public void setSaveBestFrameEnabled(boolean value) {
        WrapperJNI.PhotoMaker_setSaveBestFrameEnabled(swigCPtr, this, value);
    }

    public int getCurrentFrameNumber() {
        return WrapperJNI.PhotoMaker_getCurrentFrameNumber(swigCPtr, this);
    }

    public int getBestShotFrameNumber() {
        return WrapperJNI.PhotoMaker_getBestShotFrameNumber(swigCPtr, this);
    }

    public int getLastFrameWithDetectionNumber() {
        return WrapperJNI.PhotoMaker_getLastFrameWithDetectionNumber(swigCPtr, this);
    }

    public float getFrameScaleFactor() {
        return WrapperJNI.PhotoMaker_getFrameScaleFactor(swigCPtr, this);
    }

    public void setFrameScaleFactor(float factor) {
        WrapperJNI.PhotoMaker_setFrameScaleFactor(swigCPtr, this, factor);
    }

    public int getMaxNumberOfFramesWithoutDetection() {
        return WrapperJNI.PhotoMaker_getMaxNumberOfFramesWithoutDetection(swigCPtr, this);
    }

    public void setMaxNumberOfFramesWithoutDetection(int number) {
        WrapperJNI.PhotoMaker_setMaxNumberOfFramesWithoutDetection(swigCPtr, this, number);
    }

    public boolean getStopAfterBestShot() {
        return WrapperJNI.PhotoMaker_getStopAfterBestShot(swigCPtr, this);
    }

    public void setStopAfterBestShot(boolean value) {
        WrapperJNI.PhotoMaker_setStopAfterBestShot(swigCPtr, this, value);
    }

    public float getBestShotScoreThreshold() {
        return WrapperJNI.PhotoMaker_getBestShotScoreThreshold(swigCPtr, this);
    }

    public void setBestShotScoreThreshold(float value) {
        WrapperJNI.PhotoMaker_setBestShotScoreThreshold(swigCPtr, this, value);
    }

    public void setMovementThreshold(float value) {
        WrapperJNI.PhotoMaker_setMovementThreshold(swigCPtr, this, value);
    }

    public void setConfidenceScore(float value) {
        WrapperJNI.PhotoMaker_setConfidenceScore(swigCPtr, this, value);
    }

    public boolean isSlowMovement() {
        return WrapperJNI.PhotoMaker_isSlowMovement(swigCPtr, this);
    }

    public float getMovementValue() {
        return WrapperJNI.PhotoMaker_getMovementValue(swigCPtr, this);
    }

    public float getRotationThresold() {
        return WrapperJNI.PhotoMaker_getRotationThreshold(swigCPtr, this);
    }

    public void setRotationThreshold(float value) {
        WrapperJNI.PhotoMaker_setRotationThreshold(swigCPtr, this, value);
    }

    public void setPortraitMaxHeight(int value)
    {
        WrapperJNI.PhotoMaker_setPortraitMaxHeight(swigCPtr, this, value);
    }

    public void setMinFaceScaleFactor(float value) { // *** rts ***
        WrapperJNI.PhotoMaker_setMinFaceScaleFactor(swigCPtr, this, value);
    }

    public void setMaxFaceScaleFactor(float value) { // *** rts ***
        WrapperJNI.PhotoMaker_setMaxFaceScaleFactor(swigCPtr, this, value);
    }

    public boolean isFrontalPose() {
        return WrapperJNI.PhotoMaker_isFrontalPose(swigCPtr, this);
    }

    public int getEyesState() {
        return WrapperJNI.PhotoMaker_getEyesState(swigCPtr, this);
    }
}
